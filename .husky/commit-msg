#!/usr/bin/env sh

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to display installation instructions
show_install_instructions() {
    echo "Error: Required dependencies are not installed!"
    echo
    echo "Please make sure you have:"
    echo "1. Node.js and npm installed"
    echo "2. Run 'npm install' in the project root"
    echo
    echo "To install Node.js and npm:"
    echo "  - Windows: Download from https://nodejs.org/"
    echo "  - macOS:   brew install node"
    echo "  - Linux:   sudo apt install nodejs npm"
    echo
    echo "After installing Node.js and npm:"
    echo "1. Navigate to the project root"
    echo "2. Run: npm install"
    echo
    echo "This will install husky and other required dependencies."
}

# Check for Node.js
if ! command_exists node; then
    echo "Error: Node.js is not installed"
    show_install_instructions
    exit 1
fi

# Check for npm
if ! command_exists npm; then
    echo "Error: npm is not installed"
    show_install_instructions
    exit 1
fi

# Check for husky
if [ ! -f "$(dirname -- "$0")/_/husky.sh" ]; then
    echo "Error: Husky is not installed"
    show_install_instructions
    exit 1
fi

# Check for commitlint
if ! command_exists npx; then
    echo "Error: npx is not available"
    show_install_instructions
    exit 1
fi

# Load husky
. "$(dirname -- "$0")/_/husky.sh"

# Function to display help message
show_help() {
    echo "Commit message validation failed!"
    echo "Please follow the conventional commit format:"
    echo
    echo "Allowed types:"
    echo "  feat:     A new feature"
    echo "  fix:      A bug fix"
    echo "  docs:     Documentation changes"
    echo "  style:    Code style changes (formatting, etc)"
    echo "  refactor: Code changes that neither fix bugs nor add features"
    echo "  perf:     Performance improvements"
    echo "  test:     Adding or modifying tests"
    echo "  build:    Changes to build system or dependencies"
    echo "  ci:       Changes to CI configuration"
    echo "  chore:    Other changes that don't modify src or test files"
    echo
    echo "Format: <type>(<scope>): <description>"
    echo "Example: feat(auth): add login functionality"
    echo
    echo "For more details, visit: https://www.conventionalcommits.org"
}

# Function to validate commit message
validate_commit() {
    local commit_msg="$1"
    
    # Check if message is empty
    if [ -z "$commit_msg" ]; then
        echo "Error: Commit message cannot be empty"
        show_help
        return 1
    fi
    
    # Check if message follows conventional commit format
    if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([a-z0-9-]+\))?: .{1,}'; then
        echo "Error: Commit message does not follow conventional commit format"
        show_help
        return 1
    fi
    
    # Check message length
    if [ ${#commit_msg} -gt 100 ]; then
        echo "Error: Commit message is too long (max 100 characters)"
        return 1
    fi
    
    return 0
}

# Get commit message from file
COMMIT_MSG=$(cat "$1")

# Validate commit message
if ! validate_commit "$COMMIT_MSG"; then
    exit 1
fi

# Run commitlint
npx --no -- commitlint --edit "$1" || {
    echo
    show_help
    exit 1
} 